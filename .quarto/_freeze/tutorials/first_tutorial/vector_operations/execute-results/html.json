{
  "hash": "a41ed96a3d535a4ec14f7feb97cf265e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Vector Operations\"\n---\n\n## Arithmetic with Vectors\n\nWe can perform various arithmetic operations using vectors in R. The most important thing to keep in mind when doing vector arithmetic is the length of the vectors involved. We can check the length of a vector using the `length()` function.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ny <- 1:4\nlength(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\nArithmetic in R works element-wise when applied to vectors. That means each operation is performed between corresponding elements of the vectors:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n(x <- rep(2, 4))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 2 2 2\n```\n\n\n:::\n\n```{.r .cell-code}\ny + x\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 4 5 6\n```\n\n\n:::\n\n```{.r .cell-code}\ny - x\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -1  0  1  2\n```\n\n\n:::\n\n```{.r .cell-code}\ny / x\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5 1.0 1.5 2.0\n```\n\n\n:::\n\n```{.r .cell-code}\ny * x\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 4 6 8\n```\n\n\n:::\n:::\n\n\nIf two vectors involved in an operation are of unequal lengths, R will recycle the shorter one to match the length of the longer. This happens silently, which can be useful but also potentially dangerous:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nz <- c(1, 2)\ny - z\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 0 2 2\n```\n\n\n:::\n:::\n\n\n\nHere, the shorter vector `z` is recycled to become `1, 2, 1, 2` so it can align with the four elements of `y`.\n\n::: {.callout-note}\n\nNote that if the lengths of the vectors are not multiples of each other, R will return a warning.\n\n:::\n\nWe can also apply operations between a vector and a single number. In this case, the number is applied to each element of the vector automatically:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ny - 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\ny * 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  3  6  9 12\n```\n\n\n:::\n\n```{.r .cell-code}\ny / 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.3333333 0.6666667 1.0000000 1.3333333\n```\n\n\n:::\n:::\n\n\n## Logical Tests with vectors\n\nLogical comparisons in R can be applied directly to vectors. These comparisons are performed element by element, returning a logical vector of the same length. For example, we can check which elements are equal to a specific value, or whether they satisfy compound conditions using logical operators.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# check which elements of y are equal to 4\ny == 4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE FALSE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# check which elements of y are equal to 4 or 2\ny == 4 | y == 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE  TRUE FALSE  TRUE\n```\n\n\n:::\n:::\n\n\nBe cautious when comparing a vector to another vector of a different length. R performs comparisons position by position and will silently recycle the shorter vector if necessary.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# compare the i-th element in the first vector with the i-th element \n# in the second vector\ny == c(4, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE  TRUE FALSE FALSE\n```\n\n\n:::\n:::\n\n\n::: practice\n\n## Practice\n\na. Create the object `myVec` by running this two lines of code below.\nb. Programmatically create a logical vector that indicates which elements of myVec are less than 3.\n\n:::: {.panel-tabset}\n## {{< var tab_title.question >}}\n\n```{webr-r}\nset.seed(235711)\nmyVec <- sample(1:5)\n```\n\n## {{< var tab_title.solution >}}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(235711)\nmyVec <- sample(1:5)\n\n(y <- myVec < 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE FALSE FALSE  TRUE\n```\n\n\n:::\n:::\n\n::::\n\n:::\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "ec4af9a9134947cfe851c4347cac5e63",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Generating vectors\"\n---\n\n## Creating Vectors in R\n\nThere are many different ways to generate vectors in R. Some involve combining elements manually, while others use convenient functions that generate sequences or repeat values. \n\nThe `c()` function stands for *combine* or *concatenate*, and it's the most common way to manually construct a vector by specifying its elements. You can use it with any type—numeric, logical, character, and so on.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n(y1 <- c(1, 2, 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\n(y2 <- c(TRUE, FALSE, TRUE, TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE  TRUE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n(y3 <- c(\"bob\", \"suzy\", \"danny\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"bob\"   \"suzy\"  \"danny\"\n```\n\n\n:::\n:::\n\n\n::: {.callout-note}\n\nNote that the outer parentheses in the examples above are a useful trick in R—they allow you to assign a value to an object and print it immediately in a single command.\n\n:::\n\n### Generating Sequences\n\nThe colon operator `:` creates a sequence of integers between two endpoints. If used with decimal numbers, it will include fractional steps but may not behave exactly as expected in every case.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n1:5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n\n```{.r .cell-code}\n1.2:5.3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.2 2.2 3.2 4.2 5.2\n```\n\n\n:::\n:::\n\n\nFor more control we can use also `seq()`. `seq()` allows you to specify the step size or the total number of elements in the sequence using `by` or `length.out`, respectively.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nseq(0, 1, 0.25)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.00 0.25 0.50 0.75 1.00\n```\n\n\n:::\n\n```{.r .cell-code}\nseq(-1, 1, length.out = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] -1.0000000 -0.7777778 -0.5555556 -0.3333333 -0.1111111  0.1111111\n [7]  0.3333333  0.5555556  0.7777778  1.0000000\n```\n\n\n:::\n:::\n\n\n### Repeating Values\n\nThe `rep()` function is used to repeat elements. You can repeat a single value, a sequence, or even each element of a vector a specific number of times using the `each` argument.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrep(33, 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 33 33 33 33\n```\n\n\n:::\n\n```{.r .cell-code}\nrep(1:3, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 1 2 3 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\nrep(y3, each = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"bob\"   \"bob\"   \"suzy\"  \"suzy\"  \"danny\" \"danny\"\n```\n\n\n:::\n:::\n\n\n::: practice\n\n## Practice\n\nCreate a numeric vector containing the five even integers between 2 and 10 (inclusive).\n\n:::: {.panel-tabset}\n## {{< var tab_title.editor >}}\n\n```{webr-r}\n```\n\n## {{< var tab_title.solution >}}\n\nWe can use the `seq()` function to create a sequence from 2 to 10, setting the increment to 2, in order to select every even number:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nseq(2,10, by=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  4  6  8 10\n```\n\n\n:::\n:::\n\n::::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
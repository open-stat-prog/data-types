{
  "hash": "0b9bd4c533b294d0350aa83f9ee56e10",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Atomic Modes\"\n---\n\n## Different types of vectors\n\nVectors in R are essentially sequences of elements. These elements can be of six different types, called *atomic modes*. It's important to note that a vector must have all its elements of the same type, and trying to assign elements of different types to the same vector will result in coercion or an error.\n\n\n### Numeric/double\n\nThe first type is the *numeric* or *double* type, and represent the real numbers, the numbers that can have decimal place, like 6.01, 0.04 or -42.1. This is the default type for numbers in R, so if we store a number in an object without specifying otherwise, the type of that object will be numeric. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nv1 <- vector(\"numeric\", 3)\nv1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 0 0\n```\n\n\n:::\n\n```{.r .cell-code}\nv1 <- vector(\"double\", 3)\nv1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 0 0\n```\n\n\n:::\n:::\n\n\n### Logical\n\nAnother fundamental type is the *logical* type, which represents truth values. Logical vectors can only contain the values TRUE or FALSE.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nv2 <- vector(\"logical\",3)\nv2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE FALSE\n```\n\n\n:::\n:::\n\n\n### Character\n\nThe character type is used to represent text. Character vectors contain strings, which are sequences of characters enclosed in quotation marks, like \"apple\", \"data\", or \"42\".\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nv3 <- vector(\"character\",3)\nv3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"\" \"\" \"\"\n```\n\n\n:::\n:::\n\n\n### Integer\n\nThe *integer* type represents whole numbers without decimal places, such as 1, 100, or -5. While integers and numeric (double) values may look similar, they are distinct types in R. Integers are used when exact whole-number representation is needed. They can also offer slight computational advantages in terms of memory usage and performance, especially when working with large datasets.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nv4 <- vector(\"integer\",3)\nv4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 0 0\n```\n\n\n:::\n:::\n\n\n### Complex\n\nThe *complex* type is used to represent complex numbers, which have both a real and an imaginary part. In R, complex numbers are written with an i to indicate the imaginary unit, like 1+2i or 0-3.5i. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nv5 <- vector(\"complex\",3)\nv5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0+0i 0+0i 0+0i\n```\n\n\n:::\n:::\n\n\n### Raw\n\nThe *raw* type represents raw bytes of data, typically used for low-level operations.  This type is rarely used.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nv6 <- vector(\"raw\",3)\nv6\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 00 00 00\n```\n\n\n:::\n:::\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
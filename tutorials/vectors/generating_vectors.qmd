---
title: "Generating vectors"
---

## Creating Vectors in R

There are many different ways to generate vectors in R. Some involve combining elements manually, while others use convenient functions that generate sequences or repeat values. 

The `c()` function stands for *combine* or *concatenate*, and it's the most common way to manually construct a vector by specifying its elements. You can use it with any type—numeric, logical, character, and so on.

```{r}
(y1 <- c(1, 2, 3))
(y2 <- c(TRUE, FALSE, TRUE, TRUE))
(y3 <- c("bob", "suzy", "danny"))
```

::: {.callout-note}

Note that the outer parentheses in the examples above are a useful trick in R—they allow you to assign a value to an object and print it immediately in a single command.

:::

### Generating Sequences

The colon operator `:` creates a sequence of integers between two endpoints. If used with decimal numbers, it will include fractional steps but may not behave exactly as expected in every case.

```{r}
1:5
1.2:5.3
```

For more control we can use also `seq()`. The function `seq()` allows you to specify the step size or the total number of elements in the sequence using `by` or `length.out`, respectively.

```{r}
seq(0, 1, 0.25)
seq(-1, 1, length.out = 10)
```

### Repeating Values

The `rep()` function is used to repeat elements. You can repeat a single value, a sequence, or even each element of a vector a specific number of times using the `each` argument.

```{r}
rep(33, 4)
rep(1:3, 3)
rep(y3, each = 2)
```

::: practice

## Practice

Create a numeric vector containing the five even integers between 2 and 10 (inclusive).

:::: {.panel-tabset}
## {{< var tab_title.editor >}}

```{webr-r}
```

## {{< var tab_title.solution >}}

We can use the `seq()` function to create a sequence from 2 to 10, setting the increment to 2, in order to select every even number:

```{r}
seq(2,10, by=2)
```
::::

:::

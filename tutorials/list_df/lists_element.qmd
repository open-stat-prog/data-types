---
title: "List Elements"
---

## Accessing elements

R provides several mechanisms for accessing the contents of a list, each serving a distinct purpose. The three main operators used for this task are the dollar sign (`$`), single square brackets (`[]`), and double square brackets (`[[]]`). Understanding the difference between these is essential for working with lists effectively.

The dollar sign operator (`$`) is used to access elements of a list by name. It is a convenient and readable way to retrieve values from named lists. 

```{r}
l1 <- list(name = "bob",
            alive = TRUE,
            age = 33,
            relationshipStatus = 42+3i)

l1$name
```

The single bracket operator (`[]`) is used to extract one or more elements from a list, but always returns the result as a list. That is, even if only one element is selected, the output remains a list. This behavior is useful when we want to retain the list structure for further processing or subsetting.

```{r}
l1[2]
l1["name"]
```

In contrast, the double bracket operator (`[[]]`) is used to extract the element itself, rather than a list containing the element. This is the preferred method when the goal is to operate directly on the contents rather than on the list structure itself.

```{r}
l1[[2]]
l1[["age"]]
```

## Changing the elements

These differences also apply when modifying the contents of a list. We can use all the previous method to select the element we want to change.

```{r}
l1
l1[["age"]] <- 57
l1[["name"]] <- TRUE
l1[[1]] <- "suzy"
l1
```

Lists in R do not require a fixed length or predefined structure. New elements can be added at any point, either by position or by assigning to a new name. This makes them well suited for incremental construction and for collecting the results of iterative processes.

```{r}
(l2 <- list())
l2$grass <- "green"
l2$money <- 0
l2$logical <- FALSE
l2$addOne <- function(x) { x + 1 }
l2
```

It is important to recognize that the objects stored in a list remain fully functional and accessible. They behave just as they would outside of the list. For example, if a function is stored as an element of a list, we can call it directly:

```{r}
l2$addOne(2)
```

::: practice

## Practice

a. Create a list to describe yourself. Include the following named elements in your list:
1. Your Name
2. Your Eye Color
3. Your Hair Color
5. Your Favorite Color

b. Using a single command, test if your eye color OR your hair color is also your favorite color.

:::: {.panel-tabset}
## {{< var tab_title.question >}}

```{webr-r}

```

## {{< var tab_title.solution >}}

```{r}

l3 <- list(name = "bob",
           eye = "blue",
           hair = "black",
           color = "green")

l3$eye == l3$color | l3$hair == l3$color
```
::::

:::





